const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const Koa = require('koa')
const Router = require('@koa/router')
const middle = require('./middle')
const { createBundleRenderer } = require('vue-server-renderer')
const log = require('./log')('http')
const serverRouter = require('./router')
const config = require('./config')
const schedule = require('./schedule')

// websocket
const ws = require('./ws/')
ws.init()

const app = new Koa()
const router = new Router()

const isProd = process.env.NODE_ENV === 'production'
const resolve = file => path.resolve(__dirname, file)
// const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  'koa ' +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

// middle
middle(app)

// schedule 定时任务
schedule()

// api
router.use('/api', serverRouter)
app.use(router.routes())

// ssr
function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    inject: false,
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./../dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./../src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./../dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./../dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./../build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}
// setImmediate(() => {
//   console.log('setImmediate')
// })
// setTimeout(() => {
//   console.log('setTimeout')
// }, 0)
// process.nextTick(() => {
//   console.log('nextTick')
// })

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
// app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

const page404 = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><title>你访问的页面不在啦！</title><link rel="stylesheet" href="/404/style.css"></head><body><div class="container"><div class="error-content view"><div class="text-wrapper"><p class="text">哎呀！<br>你访问的页面不在啦！</p><p><a href="/" class="router-link-active"><img src="/images/arrow-home.png">返回首页</a></p></div></div></div></body></html>'

async function render(ctx) {
  console.log('in render')
  const s = Date.now()

  const errorHandle = err => {
    log.error(`error during render : ${ctx.req.url}\n${err.message}\n${err.stack}`)
    // log.error(err)
    if (err.url) {
      ctx.status = err.code || 302
      ctx.redirect(err.url)
    } else {
      ctx.status = 404
      ctx.body = page404
    }
  }

  const context = {
    title: '域名', // default title
    keywords: '域名',
    description: '域名',
    url: ctx.req.url,
    // city: req.city,
    cookies: ctx.req.cookies,
    headers: ctx.req.headers,
    session: ctx.req.session,
    cdnHost: config.cdnHost,
  }

  // console.log('context', context)
  await renderer.renderToString(context).then(html => {
    ctx.type = 'text/html'
    ctx.res.setHeader('Server', serverInfo)
    console.log('request complete!')
    ctx.body = html
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  }).catch(e => {
    errorHandle(e)
  })
}

app.use(isProd ? render : async ctx => {
  await readyPromise.then(() => render(ctx)).catch(e => {
    console.log('readyPromise e', e)
  })
})

app.on('error', err => {
  log.error('server error:', err)
})

process.on('unhandledRejection', (message, stack) => {
  log.error('未捕捉的Promise错误：', stack)
})

process.on('uncaughtException', (e) => {
  log.error('uncaughtException:', e.message)
})

app.listen(config.port, () => {
  console.log(`server started at http://localhost:${config.port}/`)
})
